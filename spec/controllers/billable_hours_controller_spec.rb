# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe BillableHoursController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # BillableHour. As you add validations to BillableHour, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      date: '2020-01-02',
      start_time: '08:00:00',
      end_time: '09:00:00',
      company_id: 1,
      employee_id: 1,
      billable_rate: 23.4
    }
  end

  let(:invalid_attributes) do
    {
      date: nil,
      start_time: nil,
      end_time: nil,
      company_id: nil,
      employee_id: nil,
      billable_rate: nil
    }
  end

  let(:user) { create(:user) }
  
  let(:headers) { valid_headers }


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BillableHoursController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    role = create(:role, name: 'Aban')
    user = create(:user, role_id: role.id) 
    token = token_generator(user.id)
    request.headers.merge!('Authorization': "Bearer #{token}")
  end


  describe 'GET #index' do
    it 'returns a success response' do
      billable_hour = BillableHour.create! valid_attributes
      get :index
      expect(response).to be_successful
    end
  end

  describe 'GET #invoice' do
    context 'with not finance role' do
      it 'returns a false user check' do
          role = create(:role, name: 'Aban')
          user = create(:user, role_id: role.id) 
          token = token_generator(user.id)
          request.headers.merge!('Authorization': "Bearer #{token}")

        get "invoice",params: {}
        expect(user.finance?).to be false
        expect(response).to have_http_status(401)
      end
    end

    context 'with finance role' do
      it 'returns a success response' do
        role = create(:role, name: 'Finance')
        user = create(:user, role_id: role.id) 
        token = token_generator(user.id)
        request.headers.merge!('Authorization': "Bearer #{token}")
        
        company1 = create(:company,name: "Ecobank")
        company2 = create(:company,name: "SNNIT")
        company3 = create(:company,name: "GCB")


        bill = create(:billable_hour,user: user,company_id: company1.id,billable_rate: 43,date: '2020-09-17',
          start_time:'04:09:42', end_time: '06:09:42' )
        get "invoice",params: {}
        expect(user.finance?).to be true
        expect(response).to have_http_status(200)
      end
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      billable_hour = BillableHour.create! valid_attributes
      get :show, params: { id: billable_hour.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new BillableHour' do
        expect do
          post :create, params: { billable_hour: valid_attributes }, session: valid_session
        end.to change(BillableHour, :count).by(1)
      end

      it 'renders a JSON response with the new billable_hour' do
        post :create, params: { billable_hour: valid_attributes }, session: valid_session
        expect(response).to have_http_status(201)
        expect(response.content_type).to eq('application/json; charset=utf-8')
        expect(response.location).to eq(billable_hour_url(BillableHour.last))
      end
    end

    context 'with invalid params' do
      it 'renders a JSON response with errors for the new billable_hour' do
        post :create, params: { billable_hour: invalid_attributes }, session: valid_session
        expect(response).to have_http_status(422)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        {
          'date' => '2020-01-02',
          'start_time' => '08:00:00',
          'end_time' => '09:00:00',
          'company_id' => 1,
          'employee_id' => 1,
          'billable_rate' => 23.4
        }
      end

      it 'updates the requested billable_hour' do
        billable_hour = BillableHour.create! valid_attributes
        put :update, params: { id: billable_hour.to_param, billable_hour: new_attributes }, session: valid_session
        billable_hour.reload
        # skip("Add assertions for updated state")
      end

      it 'renders a JSON response with the billable_hour' do
        billable_hour = BillableHour.create! valid_attributes

        put :update, params: { id: billable_hour.to_param, billable_hour: valid_attributes }, session: valid_session
        expect(response).to have_http_status(200)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end

    context 'with invalid params' do
      it 'renders a JSON response with errors for the billable_hour' do
        billable_hour = BillableHour.create! valid_attributes

        put :update, params: { id: billable_hour.to_param, billable_hour: invalid_attributes }, session: valid_session
        expect(response).to have_http_status(422)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested billable_hour' do
      billable_hour = BillableHour.create! valid_attributes
      expect do
        delete :destroy, params: { id: billable_hour.to_param }, session: valid_session
      end.to change(BillableHour, :count).by(-1)
    end
  end
end
